###############################################################################
# Al ejecutar el test, muestra el siguiente error:
#   Field 'Sale Order' (sale_id) can not be searched: non-stored function field
#   without fnct_search
# Pero la funcionalidad del modulo es correcta.
###############################################################################
-
    Create product uom category
-
    !record {model: product.uom.categ, id: product_uom_tin_measure}:
        name: Tin measure

-
    Create uom of measure 'Tin'
-
    !record {model: product.uom, id: product_uom_tin}:
        name: Tin
        category_id: product_uom_tin_measure
        uom_type: reference

-
    Create uom of measure 'Pack of 12 tins'
-
    !record {model: product.uom, id: product_uom_pack12}:
        name: Pack of 12 tins
        category_id: product_uom_tin_measure
        uom_type: bigger
        factor: 12

-
  Create product 'Flavour drink 1'
-
    !record {model: product.product, id: product_01}:
        categ_id: product.product_category_1
        name: Flavour drink 1
        type: product
        uom_id: product_uom_tin
        uom_po_id: product_uom_tin
        property_stock_inventory: stock.location_inventory
        property_stock_procurement: stock.location_procurement
        property_stock_production: stock.location_production

-
  Create price UoM for product 'Flavour drink 1'
-
    !python {model: product.product, id: product_01}: |
        product = self.browse(ref('product_01'))
        data = {
            'product_tmpl_id': product.product_tmpl_id.id,
            'uom_id': ref('product_uom_pack12'),
            'price': 11.75}
        self.env['product.uom.price'].create(data)

        product.product_tmpl_id.write({'use_uom_prices': True})

-
  Check product 'Flavour drink 1'; must have assigned tin uom and pack price
-
    !python {model: product.product, id: product_01}: |
        product = self.browse(ref('product_01'))
        assert product.uom_id.name == 'Tin'
        assert product.uom_price_ids[0].uom_id.name == 'Pack of 12 tins'
        assert product.uom_price_ids[0].price == 11.75

-
  Create pricelist item 'Flavour drink 1'
-
    !record {model: product.pricelist.item, id: pricelist_item_01}:
        price_version_id: product.ver0
        sequence: 0
        name: 5 packs Flavour drink 1; gift 10 tins Flavour drink 1
        uom_id: product_uom_pack12
        base: 1
        min_quantity: 5

-
  Create product pricelist item offer and associate with pricelist item
-
    !python {model: product.product, id: product_01}: |
        product = self.browse(ref('product_01'))
        data = {
            'name': '5 packs Flavour drink 1; gift 10 tins Flavour drink 1',
            'paid_qty': 5,
            'free_qty': 0}
        offer = self.env['product.pricelist.item.offer'].create(data)

        product = self.browse(ref('product_01'))
        data = {
            'product_pricelist_item_offer': offer.id,
            'product': product.id,
            'uom_id': ref('product_uom_tin'),
            'quantity': 10}
        self.env['sale.promotion.gift'].create(data)

        self.env['product.pricelist.item'].write({'offer': offer.id})

-
  Create partner
-
    !record {model: res.partner, id: res_partner_01}:
        name: Customer 01
        street: Real 3
        zip: 18008
        city: Granada
        country_id: base.es

-
  Create quotation of sale order
-
    !record {model: sale.order, id: sale_order_01, view: False}:
        pricelist_id: 1
        partner_id: res_partner_01
        partner_invoice_id: res_partner_01
        partner_shipping_id: res_partner_01
        order_line:
            - product_id: product_01
              product_uom: product_uom_pack12

-
  Check that the line has been assigned to the product order, unity and correct
  price
-
    !python {model: sale.order, id: sale_order_01}: |
        for line in self.order_line:
            assert line.product_uom.name == 'Pack of 12 tins'
            assert line.price_unit == 11.75
